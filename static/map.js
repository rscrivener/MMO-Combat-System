map = {
	Init: function(){
		this.mapBlockCompiler(this.mapData1);
		this.mapVectorCompiler();
	}, mapData1: [
		[[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]],
		[[1],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[1]],
		[[1],[0],[0],[0],[0],[0],[1],[0],[0],[0],[2],[0],[0],[0],[1],[0],[0],[0],[0],[0],[1]],
		[[1],[0],[0],[0],[0],[0],[0],[0],[1],[0],[0],[0],[1],[0],[0],[0],[0],[0],[0],[0],[1]],
		[[1],[0],[0],[0],[0],[0],[0],[0],[1],[1],[0],[1],[1],[0],[0],[0],[0],[0],[0],[0],[1]],
		[[1],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[1]],
		[[1],[0],[1],[0],[0],[0],[0],[1],[0],[0],[0],[0],[0],[1],[0],[0],[0],[0],[1],[0],[1]],
		[[1],[0],[0],[0],[0],[0],[1],[1],[0],[0],[0],[0],[0],[1],[1],[0],[0],[0],[0],[0],[1]],
		[[1],[0],[0],[1],[1],[0],[0],[0],[0],[1],[0],[1],[0],[0],[0],[0],[1],[1],[0],[0],[1]],
		[[1],[0],[0],[0],[1],[0],[0],[0],[1],[0],[0],[0],[1],[0],[0],[0],[1],[0],[0],[0],[1]],
		[[1],[0],[2],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[2],[0],[1]],
		[[1],[0],[0],[0],[1],[0],[0],[0],[1],[0],[0],[0],[1],[0],[0],[0],[1],[0],[0],[0],[1]],
		[[1],[0],[0],[1],[1],[0],[0],[0],[0],[1],[0],[1],[0],[0],[0],[0],[1],[1],[0],[0],[1]],
		[[1],[0],[0],[0],[0],[0],[1],[1],[0],[0],[0],[0],[0],[1],[1],[0],[0],[0],[0],[0],[1]],
		[[1],[0],[1],[0],[0],[0],[0],[1],[0],[0],[0],[0],[0],[1],[0],[0],[0],[0],[1],[0],[1]],
		[[1],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[1]],
		[[1],[0],[0],[0],[0],[0],[0],[0],[1],[1],[0],[1],[1],[0],[0],[0],[0],[0],[0],[0],[1]],
		[[1],[0],[0],[0],[0],[0],[0],[0],[1],[0],[0],[0],[1],[0],[0],[0],[0],[0],[0],[0],[1]],
		[[1],[0],[0],[0],[0],[0],[1],[0],[0],[0],[2],[0],[0],[0],[1],[0],[0],[0],[0],[0],[1]],
		[[1],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[1]],
		[[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]]
	], compiledMap: {
		types: ["grass", "wall", "spawn"],
		size: [80, 80],
		wall: {
			color: {
				r: 0,
				g: 0,
				b: 0,
				a: 1
			}, blockData: [],
			vectorData: []
		}, grass: {
			color: {
				r: 112/255,
				g: 173/255,
				b: 71/255,
				a: 1
			}, blockData: [],
			vectorData: []
		}, spawn: {
			color: {
				r: 191/255,
				g: 191/255,
				b: 191/255,
				a: 1
			}, blockData: [],
			vectorData: []
		}
	}, mapBlockCompiler: function(map){
		// converts the data map to blocks
		var block = function(x, y){
			return {
				coord: [x, y],
			}
		}
		for(var x = 0; x < 21; x++){
			for(var xx = 0; xx < 21; xx++){
				var coorX = xx * this.compiledMap.size[0];
				var coorY = x * this.compiledMap.size[1];
				this.compiledMap[this.compiledMap.types[map[x][xx]]].blockData.push(new block(coorX, coorY));
			}
		}
	}, mapVectorCompiler: function(){
		for(var xindex = 0; xindex < this.compiledMap.types.length; xindex++){
			for(var xxindex = 0; xxindex < this.compiledMap[this.compiledMap.types[xindex]].blockData.length; xxindex++){
				var x = this.compiledMap[this.compiledMap.types[xindex]].blockData[xxindex].coord[0];
				var y = this.compiledMap[this.compiledMap.types[xindex]].blockData[xxindex].coord[1];
				var x1 = x + this.compiledMap.size[0];
				var y1 = y + this.compiledMap.size[1];
				var vectorBlock = [
					x, y,
					x1, y,
					x1, y1,
					x, y,
					x, y1,
					x1, y1

				]
				for(var i = 0; i < 12; i++){
					this.compiledMap[this.compiledMap.types[xindex]].vectorData.push(vectorBlock[i]);
				}
			}
		}
	}
}